---

AWSTemplateFormatVersion: '2010-09-09'

Conditions:
  # Condition for if SSH access not wanted for maybe a prd env
  HasKeyPair: !Not [!Equals [ !Ref KeyPairName, '' ]]

Description: DR Autoscaling Amazon Linux EC2 Instance Configured with Chef Zero (Single Instance - Sophos LB)

Mappings:
  RegionMap:
    # Amazon Linux AMI 2018.03 (v1 - el6)
    # https://aws.amazon.com/amazon-linux-ami/
    # amzn-ami-hvm-2018.03.0.20190826-x86_64-gp2

    # Amazon Linux AMI (v2 - el7)
    # https://aws.amazon.com/amazon-linux-2/release-notes/
    # amzn2-ami-hvm-2.0.20190823.1-x86_64-gp2

    # N. Virginia
    us-east-1:
      amazonlinux1: ami-00eb20669e0990cb4
      amazonlinux2: ami-0b69ea66ff7391e80
      ubuntu1604: ami-04763b3055de4860b
      ubuntu1804: ami-04b9e92b5572fa0d1
    # Oregon
    us-west-2:
      amazonlinux1: ami-08d489468314a58df
      amazonlinux2: ami-04b762b4289fba92b
      ubuntu1604: ami-0994c095691a46fb5
      ubuntu1804: ami-06d51e91cea0dac8d
    # N. California
    us-west-1:
      amazonlinux1: ami-0bce08e823ed38bdd
      amazonlinux2: ami-0245d318c6788de52
      ubuntu1604: ami-0dbf5ea29a7fc7e05
      ubuntu1804: ami-0dd655843c87b6930

Metadata:
  TemplateAuthor: Levon Becker
  AWS::CloudFormation::Interface:
    ParameterGroups:
      # Ownership
      - Label:
          default: Ownership
        Parameters:
          - Owner
          - Project
          - DeleteAfter

      # Network
      - Label:
          default: Network
        Parameters:
          - VPC
          - Subnets
          - SecurityGroups

      # Instance
      - Label:
          default: Instance
        Parameters:
          - KeyPairName
          - InstanceType
          - OsSelection

      # Deployment
      - Label:
          default: Deployment
        Parameters:
          - CookbookName
          - CookbookVersion
          - ChefDkVersion
          - ChefDataBagSecret

    ParameterLabels:
      # Ownership
      Owner:
        default: Team or Individual Owner
      DeleteAfter:
        default: Delete After Date
      Project:
        default: Project Name

      # Network
      VPC:
        default: VPC ID
      Subnets:
        default: Subnets
      SecurityGroups:
        default: Security Groups

      # Instance
      KeyPairName:
        default: EC2 Key Pair Name
      InstanceType:
        default: Instance Type
      OsSelection:
        default: OS Selection

      # Deployment
      CookbookName:
        default: Cookbook Name
      CookbookVersion:
        default: Cookbook Version
      ChefDkVersion:
        default: ChefDK Version
      ChefDataBagSecret:
        default: Chef Data Bag Secret

Outputs:
  # Ownership
  Owner:
    Description: Team or Individual that Owns this Formation.
    Value: !Ref Owner
  DeleteAfter:
    Description: It is ok to delete the Formation after this date.
    Value: !Ref DeleteAfter
  Project:
    Description: Name of associated project.
    Value: !Ref Project

  # Network
  VPC:
    Value: !Ref VPC
  Subnets:
    Value: !Join [',', !Ref Subnets]
  SecurityGroups:
    Value: !Join [',', !Ref SecurityGroups]

  # Instance
  KeyPairName:
    Description: Key Pair Name Used.
    Value: !Ref KeyPairName
  InstanceType:
    Description: Instance Type Used.
    Value: !Ref InstanceType
  OsSelection:
    Description: Operating System.
    Value: !Ref OsSelection

  # Deployment
  CookbookName:
    Value: !Ref CookbookName
  CookbookVersion:
    Value: !Ref CookbookVersion
  ChefDkVersion:
    Value: !Ref ChefDkVersion

  # Generated
  AMI:
    Description: AMI Used.
    Value: !FindInMap [ RegionMap, !Ref "AWS::Region", !Ref "OsSelection" ]
  IAMRole:
    Description: IAM Instance Profile Role Created.
    Value: !Ref IamRole

Parameters:
  # Ownership
  Owner:
    Type: String
    Default: FirstName LastName
  Project:
    Type: String
    Default: BonusBits Base Cookbook Deploy Testing
  DeleteAfter:
    Type: String
    Default: 00/00/202x

  # Network
  VPC:
    Type: AWS::EC2::VPC::Id
  Subnets:
    Type: List<AWS::EC2::Subnet::Id>
  SecurityGroups:
    Type: List<AWS::EC2::SecurityGroup::Id>

  # Instance
  KeyPairName:
    Type: AWS::EC2::KeyPair::KeyName
  InstanceType:
    Type: String
    AllowedValues:
    - c5.large
    - m3.medium
    - m5.large
    - r5.large
    - t3.nano
    - t3.micro
    - t3.small
    - t3.medium
    - t3.large
    Default: t3.micro
  OsSelection:
    Type: String
    AllowedValues:
      - amazonlinux1
      - amazonlinux2
    Default: amazonlinux2

  # Deployment
  CookbookName:
    Type: String
    Default: bonusbits_base
  CookbookVersion:
    Type: String
    Default: latest
  ChefDkVersion:
    Type: String
    Default: 4.5.0
  ChefDataBagSecret:
    Type: String
    NoEcho: true
    MinLength: 684
    Default: "CYEh1mnfH+TrzeVa8cyDAHWicV8hKni7P40xVPUn2Cm8638QvFS24iK7DRtP5VlDpogSaxDm050riKcAZ++rwUsJdUcQyx6KdXIMKEVml+ZjYW9BC3c4fMWPYbBkdWHBTpUP6OpMl9eNdPoa36vKRuxBrYGAKzLLDlTTqvoRlKEpAKpdSdgp3zZnGeymEeYYyG2Lv9p6ZbmlcDqRdB2hPu+grNkDWNrwDfV/UxF3QOtLQQB7c5edDHa1rmegNbP1Gb/h2Gu+HFf2sQnCFnjG20rxwJaL5lSdUs2AOdR+B+fDL+y7o6LxIN3n3EQWfdzzDsJXFjKhF0b+mAAmgJy9q2R1Sqr0f0X078icvu9zlUMjgJxSAShsXW00y9swcItQXFpJTFXnaswbd7YtJBsrNvfcOuSF9GhO6y1vCTbeOUMet+G6KbDIO0YxKF+fi07VPSTkAoXznC0t9o8s7Kqdd1pgx3xxVr80r9v3uKZcM+wMBk7TrpswKr6A4sIT0kBaJTgr37uDH8uIoiqEpxHfHEge6vVWfJyRaXjdyG7aJ3VwuJvSrIkuVJCam3ie2Dr09KBUWNYHXOmPb3eM0ByudcXNS0IXNAWqQJ5leNTINcqq4OZmAJHHOUo7qJhtqLVtr+Zwcady+WQ0ta1kmhQuWJ8RAhCCBUCUTISKEtXuF8E="

Resources:
  # CloudWatch
  CloudWatchLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Ref "AWS::StackName"
      RetentionInDays: '30'

  # IAM
  IamRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Ref AWS::StackName
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/ReadOnlyAccess
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"

  IamPolicies:
    Type: AWS::IAM::Policy
    DependsOn: IamRole
    Properties:
      PolicyName: !Join [ '', [ !Ref "AWS::StackName", -instance-policy ] ]
      Roles: [!Ref IamRole]
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        # Allow Full S3 Access
        - Effect: Allow
          Action:
          - s3:*
          Resource: "*"
        # Allow Write CloudWatch Logs
        - Effect: Allow
          Action:
          - cloudwatch:PutMetricData
          Resource: "*"
        - Effect: Allow
          Action:
          - logs:PutLogEvents
          - logs:CreateLogStream
          - logs:DescribeLogStreams
          - logs:CreateLogGroup
          Resource:
            Fn::Join:
            - ''
            - - 'arn:aws:logs:'
              - !Ref AWS::Region
              - ":"
              - !Ref AWS::AccountId
              - ":log-group:"
              - !Ref CloudWatchLogsGroup
              - ":log-stream:*"

  IamInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    DependsOn: IamRole
    Properties:
      Path: "/"
      Roles: [!Ref IamRole]

  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    DependsOn:
      - LaunchConfiguration
    Properties:
      VPCZoneIdentifier: !Ref Subnets
      LaunchConfigurationName: !Ref LaunchConfiguration
      MinSize: 1
      MaxSize: 1
      DesiredCapacity: 1
      MetricsCollection:
        - Granularity: 1Minute
          Metrics:
            - GroupMinSize
            - GroupMaxSize
            - GroupDesiredCapacity
            - GroupInServiceInstances
            - GroupPendingInstances
            - GroupStandbyInstances
            - GroupTerminatingInstances
            - GroupTotalInstances
      Tags:
        - Key: Name
          Value: !Ref "AWS::StackName"
          PropagateAtLaunch: true
        - Key: Owner
          Value: !Ref Owner
          PropagateAtLaunch: true
        - Key: DeleteAfter
          Value: !Ref DeleteAfter
          PropagateAtLaunch: true
    CreationPolicy:
      ResourceSignal:
        Count: 1
        Timeout: PT15M
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: 1
        MaxBatchSize: 1

  LaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    DependsOn:
      - IamInstanceProfile
    Properties:
      AssociatePublicIpAddress: false
      ImageId: !FindInMap [ RegionMap, !Ref "AWS::Region", amazon ]
      SecurityGroups: !Ref SecurityGroups
      InstanceType: !Ref InstanceType
      IamInstanceProfile: !Ref IamInstanceProfile
      KeyName: !If [ HasKeyPair, !Ref KeyPairName, !Ref "AWS::NoValue"]
      InstanceMonitoring: true
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            DeleteOnTermination: true
            VolumeType: gp2
            VolumeSize: 8
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash -xe
            yum update -y
            yum install -y aws-cfn-bootstrap aws-cli cloud-init git
            /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource LaunchConfiguration --region ${AWS::Region} --configsets ec2_setup
            /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource AutoScalingGroup --region ${AWS::Region}
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          ec2_setup:
            - config_cfn
            - install_chefdk
            - setup_chef_client
            - run_chef_client
            - warm_ebs
        config_cfn:
          files:
            "/etc/cfn/cfn-hup.conf":
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
              mode: '000400'
              owner: root
              group: root
            "/etc/cfn/hooks.d/cfn-auto-reloader.conf":
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.LaunchConfiguration.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource LaunchConfiguration --region ${AWS::Region} --configsets ec2_setup
                runas=root
          services:
            sysvinit:
              cfn-hup:
                enabled: true
                ensureRunning: true
                files:
                  - /etc/cfn/cfn-hup.conf
                  - /etc/cfn/hooks.d/cfn-auto-reloader.conf
        install_chefdk:
          commands:
            01_install_chefdk:
              command: !Sub "curl -L https://omnitruck.chef.io/install.sh | bash -s -- -P chefdk -v ${ChefDkVersion}"
        setup_chef_client:
          commands:
            01_mkdir_chef_repo:
              command: "mkdir -p /etc/chef"
            02_mkdir_chef_repo_subdirs:
              cwd: /etc/chef
              command: "mkdir -p cookbooks checksums environments cache backup data_bags roles"
            03_download_cookbook:
              cwd: /etc/chef/cookbooks
              command: !Sub "git clone --branch ${CookbookVersion} https://github.com/bonusbits/${CookbookName}.git"
            04_deploy_databags:
              cwd: /etc/chef
              command: !Sub "cp -R cookbooks/${CookbookName}/test/data_bags/${CookbookName} data_bags/"
            05_download_dependent_cookbook:
              cwd: !Sub "/etc/chef/cookbooks/${CookbookName}"
              command: !Sub "/opt/chefdk/embedded/bin/berks install"
            06_vendor_dependent_cookbook:
              cwd: !Sub "/etc/chef/cookbooks/${CookbookName}"
              command: !Sub "export HOME=/root && /opt/chefdk/embedded/bin/berks vendor /etc/chef/cookbooks/"
          files:
            "/etc/chef/encrypted_data_bag_secret":
              content: !Sub ${ChefDataBagSecret}
            "/etc/chef/client.rb":
              content: !Sub |
                node_name 'ec2_node'
                checksum_path '/etc/chef/checksums'
                file_cache_path '/etc/chef/cache'
                file_backup_path '/etc/chef/backup'
                cookbook_path '/etc/chef/cookbooks'
                data_bag_path '/etc/chef/data_bags'
                environment_path '/etc/chef/environments'
                role_path '/etc/chef/roles'
                chef_server_url 'http://127.0.0.1:8889'
                encrypted_data_bag_secret '/etc/chef/data_bags/encrypted_data_bag_secret'
                log_level :info
                log_location '/var/log/chef-client.log'
                verify_api_cert false
            "/etc/chef/environments/aws.json":
              content: !Sub |
               {
                   "name": "aws",
                   "description": "Environment",
                   "cookbook_versions": {},
                   "json_class": "Chef::Environment",
                   "chef_type": "environment",
                   "default_attributes": {
                   },
                   "override_attributes": {
                       "${CookbookName}": {
                           "cloudwatch_logs": {
                               "logs_group_name": "${CloudWatchLogsGroup}"
                           }
                       }
                   }
               }
        run_chef_client:
          commands:
            01_run_chef:
              command: !Sub "/opt/chefdk/bin/chef-client -z --chef-license accept -o 'recipe[${CookbookName}]' --environment 'aws' --config /etc/chef/client.rb --log_level info --force-formatter --chef-zero-port 8889"
        warm_ebs:
          commands:
            01_warm_ebs:
              command: "echo 'ACTION: Performing EBS Warming' && dd if=/dev/xvda of=/dev/xvda conv=notrunc bs=1M status=progress"
